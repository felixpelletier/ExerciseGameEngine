require 'rake'
require 'rake/clean'
#Rake.application.options.trace_rules = true

# env check
if ENV['OS'] == "Windows_NT"
  $PLATFORM = 'win32'
  puts "Platform is Windows NT."
else
  $PLATFORM = 'unix'
  puts "Platform is Linux."
end


#define the compiler and options
COMPILER = "clang++"
$base_flags = ['-std=c++11',
               '-Iinclude',
               '-I.glm',
               '-I.tinyobj',
               ]

if ENV['debug']
  $base_flags << ['-Wall', '--verbose', '-Wl,-v', '-g',]
end

if $PLATFORM == 'win32'
  $libs_flags = ['-Llib',
                 '-I./include/lua',
                 '-lglfw3',
                 '-lua53',
                 '-lopengl32',
                 '-lgdi32',
                 '-lglew32',]

  ['./lib/lua53.dll', './lib/glew32.dll'].each{ |l| cp(l, './build') }
else # linux env
  $libs_flags = ['-Llib',
                 '-ltinyobjloader',
                 '-lglfw',
                 '-lrt',
                 '-lm',
                 '-ldl',
                 '-llua',
                 '-lGL',
                 '-lGLEW',]
end


#define src and object ouptus
SRC_CPP = Rake::FileList["src/**/*.cpp"]
SRC_CPP.exclude("**/main.cpp")
MAIN = Rake::FileList["src/**/main.cpp"]
SRC_OBJ = SRC_CPP.pathmap("%{src/,build/}X.o")
CLEAN.include(SRC_OBJ)

task :default => ["build", :tinyobj, :get_glm, SRC_OBJ].flatten

directory "build"
CLOBBER.include('build')

directory "build/lib"

def source_for_obj(obj)
  all_src = SRC_CPP
  all_src.detect{|f| f.pathmap("%n") == obj.pathmap("%n")}
end

rule ".o" => ->(f){source_for_obj(f)} do |t|
  mkdir_p t.name.pathmap("%d")
  target = t.name
  src = t.source
  flags = $base_flags.flatten.join(' ')
  sh "#{COMPILER} #{flags} -c -o #{target} #{src}"
end

def target_for_lib(lib)
  if $PLATFORM == 'win32'
    lib.pathmap("build/lib/%n.lib")
  else
    lib.pathmap("build/lib/lib%n.a")
  end
end

task :get_tinyobj do
  unless File.directory?(".tinyobj")
    sh 'git clone https://github.com/syoyo/tinyobjloader .tinyobj'
    sh 'git -C .tinyobj checkout 475bc83ef319'
  end
end
CLOBBER.include('.tinyobj')

task :tinyobj => [:get_tinyobj, "build", "build/lib"] do
  target = target_for_lib('tinyobjloader')
  src = '.tinyobj/tiny_obj_loader.cc'
  unless uptodate?(target, [src])
    sh "#{COMPILER} --std=c++11 -c -o #{target} #{src}"
    cp(target, 'lib/')
  end
end
CLEAN.include(['build/tinyobjloader.o',
               'build/lib/tinyobjloader.a',
               'lib/tinyobjloader.a',])

task :get_glm do
  unless File.directory?(".glm")
    sh "git clone https://github.com/g-truc/glm.git .glm"
    sh "git -C .glm checkout 8f39bb8730d4"
  end
end
CLOBBER.include('.glm')

task :compile => :default do

  if $PLATFORM == "win32"
    target = 'build/soul.exe'
  else
    target = 'build/soul'
  end

  src = SRC_OBJ + MAIN
  flags = $base_flags.flatten.join(' ')
  libs = $libs_flags.flatten.join(' ')

  sh "#{COMPILER} #{flags} #{libs} -o #{target} #{src}" unless uptodate?(target, src)
end

task :run => :compile do
  if $PLATFORM == 'win32'
    exe = './build/soul.exe'
  else
    exe = './build/soul'
  end
  system exe
end
