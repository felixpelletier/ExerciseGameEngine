require 'rake'
require 'rake/clean'

# env check
if ENV['OS'] == "Windows_NT"
  $PLATFORM = 'win32'
  puts "Platform is Windows NT."
else
  $PLATFORM = 'unix'
  puts "Platform is Linux."
end


#define the compiler
COMPILER = "clang++"

#define src and object ouptus
SRC_CPP = Rake::FileList["src/**/*.cpp"]
SRC_OBJ = SRC_CPP.pathmap("%{src/,build/}X.o")

task :default => SRC_OBJ

directory "build"
directory "build/lib"
rule "*.o" => ->(f){source_for_obj(f)} do |t|
  mkdir_p t.name.pathmap("d")
  sh "#{COMPILER} #{CPP_FLAGS} -c -o #{t.target} #{t.src}"
end

def source_for_obj(obj)
  all_src = SRC_CPP
  all_src.detect{|f| f.pathmap("%X") == obj.pathmap("%X")}
end

def target_for_lib(lib)
  if $PLATFORM == 'win32'
    lib.pathmap("build/lib/%n.lib")
  else
    lib.pathmap("build/lib/lib%n.a")
  end
end

task :get_tinyobj do
  unless File.directory?(".tinyobj")
    sh 'git clone https://github.com/syoyo/tinyobjloader .tinyobj'
    sh 'git -C .tinyobj checkout 475bc83ef319'
  end
end

task :tinyobj => [:get_tinyobj, "build", "build/lib"] do
  target = target_for_lib('tinyobjloader')
  src = [".tinyobj/tiny_obj_loader.cc"].join(' ')
  unless uptodate?(target, src)
    sh "#{COMPILER} -c -o #{target} #{src}"
  end
end

task :get_glm do
  unless File.directory?(".glm")
    sh "git clone https://github.com/g-truc/glm.git .glm"
    sh "git -C .glm checkout 8f39bb8730d4"
  end
end

task :main => [:get_glm, :tinyobj] do
  env = Environment.new

  #def src
  Dir.chdir('src')
  src = Dir.glob('**/*.cpp')
  Dir.chdir('..')

  #def out
  if $PLATFORM == "win32"
    out = 'soul.exe'
  else
    out = 'soul'
  end
  out = env.prepend_build(out)

  env.src_dir = 'src'
  env.build_dir = 'build'
  env.append_flag(['-O2', '-std=c++11'])
  if ENV['debug']
    env.append.flag(['--verbose', 'Wl,-v', '-g'])
  end
  env.append_lib(['tinyobjloader'])
  env.append_include(['.glm', '.tinyobj'])
  if $PLATFORM == 'win32'
    env.append_include(['"./include/lua"'])
    #env.append_libdir(['""', '"C:\tools\mingw64\lib\gcc\x86_64-w64-mingw32\lib"'])
    env.append_lib(['glfw3', 'lua53', 'opengl32', 'gdi32', 'glew32'])
    ex = "cp ./lib/lua53.dll ./lib/glew32.dll ./build"
    puts ex
    system ex
  else # linux env
    env.append_lib(['glfw', 'rt', 'm', 'dl', 'lua', 'GL', 'GLEW'])
  end
  env.compile(src, out)
end

task :run => :main do
  if $PLATFORM == 'win32'
    exe = './build/soul.exe'
  else
    exe = './build/soul'
  end
  puts exe
  system exe
end

task :default => :main
# >> Platform is Linux.
